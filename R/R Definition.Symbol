/language=R
/function=abs
/function=cos
/function=fixed
/function=log
/function=log10
/function=max
/function=mean
/function=median
/function=min
/function=mod
/function=round
/function=scale
/function=sin
/function=sort
/function=sqrt
/function=strsplit
/function=sum
/function=tan
/function=tolower
/function=toupper
/keyword=as.data.frame
/keyword=as.date
/keyword=as.matrix
/keyword=as.vector
/keyword=break
/keyword=by
/keyword=ceiling
/keyword=cut
/keyword=data.frame
/keyword=dbinom
/keyword=diff
/keyword=dnorm
/keyword=dpois
/keyword=dunif
/keyword=else
/keyword=exp
/keyword=FALSE
/keyword=FALSE
/keyword=floor
/keyword=for
/keyword=function
/keyword=grep
/keyword=help
/keyword=if
/keyword=ifelse
/keyword=ignore.case
/keyword=in
/keyword=Inf
/keyword=INF
/keyword=istrue
/keyword=merge
/keyword=NA
/keyword=NA_character_
/keyword=NA_complex_
/keyword=NA_integer_
/keyword=NA_real_
/keyword=na.rm
/keyword=NaN
/keyword=next
/keyword=NULL
/keyword=paste
/keyword=pbinom
/keyword=pnorm
/keyword=ppois
/keyword=punif
/keyword=qbinom
/keyword=qnorm
/keyword=qpois
/keyword=quantile
/keyword=qunif
/keyword=range
/keyword=rbinom
/keyword=rep
/keyword=repeat
/keyword=rnorm
/keyword=rpois
/keyword=runif
/keyword=sd
/keyword=seq
/keyword=signif
/keyword=sub
/keyword=substr
/keyword=switch
/keyword=sys.date
/keyword=TRUE
/keyword=trunc
/keyword=while
/operator=^
/operator=-
/operator=!
/operator=!=
/operator=*
/operator=**
/operator=/
/operator=&
/operator=%/%
/operator=%%
/operator=%a
/operator=%A
/operator=%b
/operator=%B
/operator=%d
/operator=%m
/operator=%y
/operator=%Y
/operator=‚Üê
/operator=+
/operator=<
/operator=<=
/operator==
/operator===
/operator=>
/operator=>=
/operator=|
/grammar = prog ::= ( expr (';'|NL)* | NL )* EOF ;
/grammar = expr ::= expr '[[' sublist ']' ']' | expr '[' sublist ']' | expr ('::'|':::') expr | expr ('$'|'@') expr | <assoc=right> expr '^' expr | ('-'|'+') expr | expr ':' expr | expr USER_OP expr | expr ('*'|'/') expr | expr ('+'|'-') expr | expr ('>'|'>='|'<'|'<='|'=='|'!=') expr | '!' expr | expr ('&'|'&&') expr | expr ('|'|'||') expr | '~' expr | expr '~' expr | expr ('<-'|'<<-'|'='|'->'|'->>'|':=') expr | 'function' '(' formlist? ')' expr | expr '(' sublist ')' | '{' exprlist '}' | 'if' '(' expr ')' expr | 'if' '(' expr ')' expr 'else' expr | 'for' '(' ID 'in' expr ')' expr | 'while' '(' expr ')' expr | 'repeat' expr | '?' expr | 'next' | 'break' | '(' expr ')' | ID | STRING | HEX | INT | FLOAT | COMPLEX | 'NULL' | 'NA' | 'Inf' | 'NaN' | 'TRUE' | 'FALSE' ;
/grammar = exprlist ::= expr ((';'|NL) expr?)* | ;
/grammar = formlist ::= form (',' form)* ;
/grammar = form ::= ID | ID '=' expr | '...' | '.' ;
/grammar = sublist ::= sub (',' sub)* ;
/grammar = sub ::= expr | ID '=' | ID '=' expr | STRING '=' | STRING '=' expr | 'NULL' '=' | 'NULL' '=' expr | '...' | '.' | ;
/grammar = HEX ::= '0' ('x'|'X') HEXDIGIT+ [Ll]? ;
/grammar = INT ::= DIGIT+ [Ll]? ;
/grammar = HEXDIGIT ::= ('0'..'9'|'a'..'f'|'A'..'F') ;
/grammar = FLOAT ::= DIGIT+ '.' DIGIT* EXP? [Ll]? | DIGIT+ EXP? [Ll]? | '.' DIGIT+ EXP? [Ll]? ;
/grammar = DIGIT ::= '0-9' ; 
/grammar = EXP ::= ('E' | 'e') ('+' | '-')? INT ;
/grammar = COMPLEX ::= INT 'i' | FLOAT 'i' ;
/grammar = STRING ::= '"' ( ESC | ~[\\"] )*? '"' | '\'' ( ESC | ~[\\'] )*? '\'' | '`' ( ESC | ~[\\'] )*? '`' ;
/grammar = ESC ::= '\\' [abtnfrv"'\\] | UNICODE_ESCAPE | HEX_ESCAPE | OCTAL_ESCAPE ;
/grammar = UNICODE_ESCAPE ::= '\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT | '\\' 'u' '{' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT '}' ;
/grammar = OCTAL_ESCAPE ::= '\\' [0-3] [0-7] [0-7] | '\\' [0-7] [0-7] | '\\' [0-7] ;
/grammar = HEX_ESCAPE ::= '\\' HEXDIGIT HEXDIGIT? ;
/grammar = ID ::= '.' (LETTER|'_'|'.') (LETTER|DIGIT|'_'|'.')* | LETTER (LETTER|DIGIT|'_'|'.')* ; 
/grammar = LETTER ::= 'a-z' | 'A-Z' ;
/grammar = USER_OP ::= '%' .*? '%' ;
/grammar = COMMENT ::= '#' .*? '\r'? '\n' -> type(NL) ;
/grammar = NL ::= '\r'? '\n' ;
/grammar = WS ::= [ \t\u000C]+ -> skip ;
