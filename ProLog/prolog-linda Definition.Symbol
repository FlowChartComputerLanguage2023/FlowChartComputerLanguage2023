/Language=prolog-linda 
/name=Start 
/Author=Library 
/version=1 
/filename = Startprolog-linda.symbol 
/stroke=prolog-linda 
/programtext= Goto {[(Address1.Pathname])]}   /';No {[(Address0.PathName)]}     
/notes=prolog-linda Auto Made 
/line = -250,250,250,250,Red 
/line = -250,-250,-250,250,Green 
/line = 250,-250,-250,-250,Blue 
/line = 250,250,250,-250,orange 
/line = -250,250,250,-250,Purple 
/line = 250,250,-250,-250,brown 
/point = -50 , 250 , Output , Logic , GotoNextLine 
/name=End 
/author=Library 
/version=1 
/filename = Endprolog-linda.symbol 
/stroke=A 
/programtext={[(CameFrom)]} 
/opcode=nop 
/line = -250,100,250,100,Red 
/line = 250,100,250,-100,Green 
/line = 250,-100,-250,-100,Yellow 
/line = -250,-100,-250,100,Blue 
/point = 0,100, input, logic, ComeFrom 
/point = -250 , 0 , Input , Integer , CameFrom 
/name=If 
/author=Library 
/version=1 
/filename = prolog-lindaIf.symbol 
/stroke=B 
/opcode=nop 
/line = 0,250,250,0,Red 
/line = 250,0,0,-250,Green 
/line = 0,-250,-250,0,Yellow 
/line = -250,0,0,250,Blue 
/point = 0,-250, input, logic, cameFrom 
/point = 0,-250, input, logic, GotoNextLine 
/point = -150 , 150 , Input , Integer , a 
/point = 150 , 150 , Input , Integer , b 
/point = -50 , 250 , Output , Logic , c 
/point = -50 , 250 , Output , Logic , d 
/point = -50 , 250 , Output , Logic , e 
/name=Print 
/Author=Library 
/version=1 
/filename = Printprolog-linda.symbol 
/stroke=C 
/programtext= {[(CameFrom)]} : Print TextString :Goto {[(GotoNextLine.Pathname)]} 
/opcode= 
/line = -250, 250, 250, 250, Cyan 
/line = -250, -250, -250, 250, Crimson 
/line = 250, -250, -250, -250, Cornsilk 
/line = 250, 250, 250, -250, CornflowerBlue 
/line = -250, 250, 250, -250, Coral 
/line = 250, 250, -250, -250, Chocolate 
/point = -50,  250,  Output,  Logic,  GotoNextLine 
/point=-250,  0,  input,  string,  TextString 
/name=Called 
/Author=Library 
/version=1 
/filename=Calledprolog-linda.symbol 
/stroke=E 
/programtext=' This calls a procedure with one variable and inputs the name of the procedure 
/programtext=call {[(CallName.pathname)]} ( {[(parameter.pathname)]} )  
/syntax= call {[(CallName.pathname)]} ( {[(parameter.pathname)]} ) 
/notes=call {[(CallName.PathName)]}(parameter) 
/notes=call Subroutine({[(variable)]}) 'if you want to make a symbol for a subroutine name Subroutine 
/notes=for 'example subtotals()'  or 'Subroutine({[(a.pathname)]}, {[(b.pathname)]}' 
/opcode=nop 
/point=0,250, input, logic, camefrom 
/point=-200, 250, input, alpha, CallName 
/point=200, 250, input, integer, parameter 
/point = 0 , -250 , Output , Logic , GotoNextLine 
/line = -250,250,250,250,Cyan 
/line = -250,-250,-250,250,Crimson 
/line = 250,250,250,-250,CornflowerBlue 
/line = -250,250,250,-250,Coral 
